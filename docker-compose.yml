version: '3.3'
services:
  redis:
    image: "redis:alpine"
    expose:
        - 6379
    ports:
      - "6379:6379"
    restart: always
    environment:
      - REDIS_REPLICATION_MODE=master

  web:
    build: ${MAIN_PATH}report_autification_backend/src
    command: bash -c 'uvicorn main:app --host 0.0.0.0'
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - SUPERUSER_NAME=${SUPERUSER_NAME}
      - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD}
      - AWS_URI=${AWS_URI}
      - AWS_ACCCESS_KEY=${AWS_ACCCESS_KEY}
      - AWS_SERVICE_NAME=${AWS_SERVICE_NAME}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
      - FILE_COUNT=5
      - FILE_SIZE=10
    #networks:
    #  - app-network
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - redis

  nodejs:
    build:
      context: ${MAIN_PATH}report_autification_front/
      dockerfile: Dockerfile
    container_name: nodejs
    environment:
      - REACT_APP_TEST=TEST
      - REACT_APP_SERVER_IP=http://localhost/api/
      - DISABLE_ESLINT_PLUGIN=true npm start
    #networks:
    #  - app-network
    restart: unless-stopped
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  server:
    restart: always
    image: nginx
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    #networks:
    #  - app-network
    ports:
      - "80:80"

#networks:
#  app-network:
#    driver: bridge

